<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>in.crespo.alfred.workflow.mpu.search</string>
	<key>connections</key>
	<dict>
		<key>1B05F63F-6143-42BC-938E-30C130F7C29B</key>
		<array/>
		<key>9A8651CC-F328-4927-A57D-6AF88FF3111B</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>1B05F63F-6143-42BC-938E-30C130F7C29B</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>45422B25-100E-47FE-9218-327B96F58E73</string>
				<key>modifiers</key>
				<integer>1048576</integer>
				<key>modifiersubtext</key>
				<string>Copy link to clipboard</string>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>39D66EBB-2213-4EF7-AE10-E56715E53177</string>
				<key>modifiers</key>
				<integer>1048576</integer>
				<key>modifiersubtext</key>
				<string>Copy link to clipboard</string>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Fernando Xavier de Freitas Crespo</string>
	<key>description</key>
	<string>Search Mac Power Users episodes</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>Search Mac Power Users</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<true/>
				<key>output</key>
				<integer>0</integer>
				<key>removeextension</key>
				<false/>
				<key>sticky</key>
				<false/>
				<key>text</key>
				<string>http://5by5.tv/mpu/{query}</string>
				<key>title</key>
				<string>Link copied to clipboard</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>45422B25-100E-47FE-9218-327B96F58E73</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>plusspaces</key>
				<false/>
				<key>url</key>
				<string>http://5by5.tv/mpu/{query}</string>
				<key>utf8</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.openurl</string>
			<key>uid</key>
			<string>1B05F63F-6143-42BC-938E-30C130F7C29B</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>autopaste</key>
				<false/>
				<key>clipboardtext</key>
				<string>http://5by5.tv/mpu/{query}</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.clipboard</string>
			<key>uid</key>
			<string>39D66EBB-2213-4EF7-AE10-E56715E53177</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>127</integer>
				<key>keyword</key>
				<string>mpu</string>
				<key>runningsubtext</key>
				<string>Searching episodes</string>
				<key>script</key>
				<string>#!/usr/bin/python
# -*- coding: utf-8 -*-

# require bs4, requests, lxml, re, shelve

from bs4 import BeautifulSoup
import requests
import re
import shelve
from pprint import pprint # just for development

query = "{query}"

item_template='  &lt;item arg="{0}" valid="{3}" autocomplete="{0}"&gt;&lt;title&gt;&lt;![CDATA[{1}]]&gt;&lt;/title&gt;&lt;subtitle&gt;&lt;![CDATA[{2}]]&gt;&lt;/subtitle&gt;&lt;icon&gt;icon.png&lt;/icon&gt;&lt;/item&gt;'

def getEpisodesInPage(page):
    episodes = []
    mpu = 'http://5by5.tv/mpu/page/{0}'
    response = requests.get(mpu.format(page))
    if response.status_code == 200:
        soup = BeautifulSoup(response.text, 'lxml')
        for div in soup.findAll('div'):
            if div.get('class') and div.get('class')[0] == 'episode':
                title = div.h3.a.text.encode('ascii', 'ignore').strip()
                episode_number = re.search('.*#([0-9]{,3}).*', title).group(1)
                subtitle = div.p.text.encode('ascii', 'ignore').strip()
                episodes.append([episode_number, title, subtitle])
    return episodes

def addEpisodeToCache(cache, episode):
    episode_number = episode[0].zfill(4)
    if not cache.has_key(episode_number):
        cache[episode_number] = episode
        return True
    return False

def cacheAll(cache):
    for i in range(1, 20): # Pick last 20 pages to cache all episodes
        episodesInPageI = getEpisodesInPage(i)
        for episode in episodesInPageI:
            #print "Caching episode {0}".format(episode[0])
            print item_template.format(episode[0], episode[1], episode[2], 'yes')
            addEpisodeToCache(cache, episode)

def listAll():
    for i in range(1, 20): # Pick last 20 pages to cache all episodes
        episodesInPageI = getEpisodesInPage(i)
        for episode in episodesInPageI:
            print item_template.format(episode[0], episode[1], episode[2], 'yes')

def main():
    # Fazer cache de tudo e depois sempre verificar a primeira p√°gina para adicionar itens atuais no cache

    cached_items = shelve.open('episodes_cache')

    if not cached_items:
        cacheAll(cached_items)
        cached_items.close()
        cached_items = shelve.open('episodes_cache')

    sorted_cached_items = sorted(cached_items, reverse=True)

    print('&lt;?xml version="1.0" encoding="UTF-8"?&gt;\n&lt;items&gt;')

    if cached_items:
        # Force get lastest 10 episodes to keep up to date
        episodesInPage0 = getEpisodesInPage(0)
        for episode in episodesInPage0:
            addEpisodeToCache(cached_items, episode)

        for item in sorted_cached_items:
            searchIn = str(cached_items[item][0]).lower() + " " + \
            str(cached_items[item][1]).lower() + " " + \
            str(cached_items[item][2]).lower()
            if query.lower() in searchIn:
                print item_template.format(cached_items[item][0], cached_items[item][1], cached_items[item][2], 'yes')
    else:
        #for item in getEpisodesInPage(9):
        #    print item_template.format(item[0], item[1], item[2], 'yes')
        #for item in getEpisodesInPage(11):
        #    print item_template.format(item[0], item[1], item[2], 'yes')
        print item_template.format(0, "Error", "Could not read cache file", 'no')

    print('&lt;/items&gt;')

    cached_items.close()

main()</string>
				<key>title</key>
				<string>Search Mac Power Users episodes</string>
				<key>type</key>
				<integer>3</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>9A8651CC-F328-4927-A57D-6AF88FF3111B</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
	</array>
	<key>readme</key>
	<string></string>
	<key>uidata</key>
	<dict>
		<key>1B05F63F-6143-42BC-938E-30C130F7C29B</key>
		<dict>
			<key>ypos</key>
			<real>10</real>
		</dict>
		<key>39D66EBB-2213-4EF7-AE10-E56715E53177</key>
		<dict>
			<key>ypos</key>
			<real>130</real>
		</dict>
		<key>45422B25-100E-47FE-9218-327B96F58E73</key>
		<dict>
			<key>ypos</key>
			<real>10</real>
		</dict>
		<key>9A8651CC-F328-4927-A57D-6AF88FF3111B</key>
		<dict>
			<key>ypos</key>
			<real>130</real>
		</dict>
	</dict>
	<key>webaddress</key>
	<string></string>
</dict>
</plist>
